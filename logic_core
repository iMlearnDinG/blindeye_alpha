import pygame
import random
from enum import Enum
import time



class Suit(Enum):
    Spades = 1
    Hearts = 2
    Diamonds = 3
    Clubs = 4


class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def __str__(self):
        return f"{self.rank} {self.suit.name}"


class Deck:
    def __init__(self):
        self.cards = [Card(rank, suit) for rank in range(1, 14) for suit in Suit]
        self.discard_pile = []

    def shuffle(self):
        random.seed(time.time())
        random.shuffle(self.cards)

    def deal(self):
        if not self.cards:
            self.cards, self.discard_pile = self.discard_pile, self.cards
            self.shuffle()
        return self.cards.pop()

    def discard(self, card):
        self.discard_pile.append(card)


class Player:
    def __init__(self, name):
        self.name = name
        self.score = 0
        self.hand = []

    def add_point(self):
        self.score += 1


class Assets:
    def __init__(self):
        pass

    def draw(self):
        pass


class Score:
    def __init__(self):
        self.players = {"player1": 0, "player2": 0}

    def update_score(self, player):
        self.players[player] += 1

    def get_score(self, player):
        return self.players[player]


def rank_proximity(player_card, dealer_card):
    return abs(player_card.rank - dealer_card.rank) % 13


def suit_proximity(player_card, dealer_card):
    return abs(player_card.suit.value - dealer_card.suit.value)


def compare_cards(player1_card, player2_card, dealer_card):
    rank_diff1 = min(abs(player1_card.rank - dealer_card.rank), abs(13 - abs(player1_card.rank - dealer_card.rank)))
    rank_diff2 = min(abs(player2_card.rank - dealer_card.rank), abs(13 - abs(player2_card.rank - dealer_card.rank)))

    if rank_diff1 < rank_diff2:
        return "player1"
    elif rank_diff1 > rank_diff2:
        return "player2"
    else:
        if player1_card.suit.value > player2_card.suit.value:
            return "player1"
        elif player1_card.suit.value < player2_card.suit.value:
            return "player2"
        else:
            return "tie"


def print_cards(players, dealer):
    print("Player 1 cards:")
    for card in players[0].hand:
        print(card)
    print("\nPlayer 2 cards:")
    for card in players[1].hand:
        print(card)
    print("\nDealer cards:")
    for card in dealer.hand:
        print(card)


def roll_dice():
    return random.randint(1, 6)


def main():
    pygame.init()
    assets = Assets()
    players = [Player("player1"), Player("player2")]
    dealer = Player("dealer")
    score = Score()

    # Initialize and deal cards for the first game
    deck = Deck()
    deck.shuffle()
    for _ in range(5):
        for player in players:
            player.hand.append(deck.deal())
        dealer.hand.append(deck.deal())

    print_cards(players, dealer)

    playing = True
    while playing:
        assets.draw()

        for i in range(5):
            player1_card = players[0].hand[i]
            player2_card = players[1].hand[i]
            dealer_card = dealer.hand[i]

            winner = compare_cards(player1_card, player2_card, dealer_card)

            if winner == "player1":
                score.update_score("player1")
            elif winner == "player2":
                score.update_score("player2")
            else:
                print("Tie! Rolling dice...")
                player1_dice = roll_dice()
                player2_dice = roll_dice()
                print("Player 1 rolled a", player1_dice)
                print("Player 2 rolled a", player2_dice)

                if player1_dice > player2_dice:
                    score.update_score("player1")
                elif player1_dice < player2_dice:
                    score.update_score("player2")

        print("Current scores:")
        print("Player 1:", score.get_score("player1"))
        print("Player 2:", score.get_score("player2"))

        next_game = input("Do you want to play the next game? (yes/no): ").lower()
        if next_game != 'yes':
            playing = False
        else:
            # Reset hands and deal new cards
            for player in players:
                player.hand.clear()
            dealer.hand.clear()

            # Create a new deck, shuffle, and deal cards for the new round
            deck = Deck()
            deck.shuffle()
            for _ in range(5):
                for player in players:
                    player.hand.append(deck.deal())
                dealer.hand.append(deck.deal())

            print_cards(players, dealer)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                playing = False

    pygame.quit()


if __name__ == "__main__":
    main()

#test